<?xml version="1.0" encoding="UTF-8"?>
<job>
<script language="VBScript" charset="UTF-8"><![CDATA[
Option Explicit
Dim WSHSHELL,CDIR,CORE,CONF,SESSION,LOG,FSO,FILE,READ,PROCESSLIST,PROCESS,NUM

If LCase(Right(WScript.fullname,11))="wscript.exe" Then
	CreateObject("wscript.shell").run("cscript.exe"&" "&""""&WScript.scriptfullname&""""),0
	WScript.quit
End If

'Aria2 Launcher 1.0

'初始模块
Function INITIALIZE()
	On Error Resume Next
	Set FSO=CreateObject("scripting.filesystemobject")
	If Not FSO.fileexists(CORE) Then
		If vbYes=MsgBox("核心文件缺失 ×"&vbCrLf&"是否前去下载 ?",vbYesNo,"Aria2") Then
			WSHSHELL.run("http://aria2.github.io/"),1
		End If
		WScript.quit
	ElseIf InStr(WSHSHELL.exec(""&CORE&""&" "&"-v").stdout.readall,"aria2 version")=0 Then
		MsgBox "核心文件错误 ×"&vbCrLf&"请您确认核心 !",48,"Aria2"
		WScript.quit
	End If
	If FSO.getfile(CONF).size=0 Then
		Set FILE=FSO.createtextfile(CONF)
		FILE.writeline("#【 运行日志相关 】#")
		FILE.writeline("")
		FILE.writeline("# 日志的保存路径")
		FILE.writeline("log="&CDIR&"aria2.log")
		FILE.writeline("")
		FILE.writeline("# 日志记录等级，默认：debug")
		FILE.writeline("log-level=warn")
		FILE.writeline("")
		FILE.writeline("")
		FILE.writeline("#【 RPC设置相关 】#")
		FILE.writeline("")
		FILE.writeline("# 启用RPC，默认：false")
		FILE.writeline("enable-rpc=true")
		FILE.writeline("")
		FILE.writeline("# 接受所有访问请求，默认：false")
		FILE.writeline("rpc-allow-origin-all=true")
		FILE.writeline("")
		FILE.writeline("# 在所有网络上监听，默认：false")
		FILE.writeline("#rpc-listen-all=true")
		FILE.writeline("")
		FILE.writeline("# RPC监听端口，端口被占用时可以修改，默认：6800")
		FILE.writeline("rpc-listen-port=6800")
		FILE.writeline("")
		FILE.writeline("# RPC访问令牌，启用后默认访问地址为：http://token:<PASSWORD>@localhost:6800/jsonrpc")
		FILE.writeline("rpc-secret=voxhuang.com")
		FILE.writeline("")
		FILE.writeline("")
		FILE.writeline("#【 全局代理相关 】#")
		FILE.writeline("")
		FILE.writeline("# 代理服务器")
		FILE.writeline("#all-proxy=[http://][USER:PASSWORD@]HOST[:PORT]")
		FILE.writeline("")
		FILE.writeline("# 代理服务器用户名")
		FILE.writeline("#all-proxy-user=<USER>")
		FILE.writeline("")
		FILE.writeline("# 代理服务器密码")
		FILE.writeline("#all-proxy-passwd=<PASSWORD>")
		FILE.writeline("")
		FILE.writeline("# 代理服务器请求方法，取值：get，tunnel，默认：get")
		FILE.writeline("#proxy-method=tunnel")
		FILE.writeline("")
		FILE.writeline("# 不代理HOST列表，多个需使用逗号隔开")
		FILE.writeline("#no-proxy=<DOMAINS>")
		FILE.writeline("")
		FILE.writeline("")
		FILE.writeline("#【 下载连接相关 】#")
		FILE.writeline("")
		FILE.writeline("# 禁用IPv6，默认：false")
		FILE.writeline("#disable-ipv6=true")
		FILE.writeline("")
		FILE.writeline("# 超时时间，单位(秒)，默认：60")
		FILE.writeline("timeout=60")
		FILE.writeline("")
		FILE.writeline("# 连接超时时间，单位(秒)，默认：60")
		FILE.writeline("connect-timeout=30")
		FILE.writeline("")
		FILE.writeline("# 重试等待时间，单位(秒)，0为禁用，默认：0")
		FILE.writeline("retry-wait=1")
		FILE.writeline("")
		FILE.writeline("# 单个任务最大线程数，添加时可指定，默认：5")
		FILE.writeline("split=1024")
		FILE.writeline("")
		FILE.writeline("# 最大同时下载任务数，运行时可修改，默认：5")
		FILE.writeline("max-concurrent-downloads=3")
		FILE.writeline("")
		FILE.writeline("# 最大单服务器连接数，添加时可指定，默认：1")
		FILE.writeline("max-connection-per-server=1024")
		FILE.writeline("")
		FILE.writeline("# 单个任务下载速度限制，默认：0")
		FILE.writeline("max-download-limit=0")
		FILE.writeline("")
		FILE.writeline("# 单个任务上传速度限制，默认：0")
		FILE.writeline("max-upload-limit=0")
		FILE.writeline("")
		FILE.writeline("# 整体下载速度限制，运行时可修改，默认：0")
		FILE.writeline("max-overall-download-limit=0")
		FILE.writeline("")
		FILE.writeline("# 整体上传速度限制，运行时可修改，默认：0")
		FILE.writeline("max-overall-upload-limit=0")
		FILE.writeline("")
		FILE.writeline("# 优化并发下载，根据带宽自动调整并发下载数量，默认：false")
		FILE.writeline("#optimize-concurrent-downloads=true")
		FILE.writeline("")
		FILE.writeline("# 文件分片大小，所有的分割都是这个长度的倍数，默认：1M")
		FILE.writeline("piece-length=1M")
		FILE.writeline("")
		FILE.writeline("# 最小分割大小，添加时可指定，取值范围1M-1024M，默认：20M")
		FILE.writeline("min-split-size=1M")
		FILE.writeline("")
		FILE.writeline("# 第一次请求HTTP服务器时使用HEAD方法，默认：false")
		FILE.writeline("#use-head=true")
		FILE.writeline("")
		FILE.writeline("# 设置请求来源，仅对HTTP(S)有效")
		FILE.writeline("#referer=<REFERER>")
		FILE.writeline("")
		FILE.writeline("# 保存Cookies文件")
		FILE.writeline("save-cookies="&CDIR&"aria2.cookies")
		FILE.writeline("")
		FILE.writeline("# 加载Cookies文件")
		FILE.writeline("load-cookies="&CDIR&"aria2.cookies")
		FILE.writeline("")
		FILE.writeline("# 客户端UA伪装，仅对HTTP(S)有效")
		FILE.writeline("peer-id-prefix=-TR2770-")
		FILE.writeline("user-agent=Transmission/2.77")
		FILE.writeline("")
		FILE.writeline("# 参数化URI支持，默认：false")
		FILE.writeline("#parameterized-uri=true")
		FILE.writeline("")
		FILE.writeline("# 响应GZip请求头，默认：false")
		FILE.writeline("#http-accept-gzip=true")
		FILE.writeline("")
		FILE.writeline("# 禁用HTTP缓存，默认：false")
		FILE.writeline("#http-no-cache=true")
		FILE.writeline("")
		FILE.writeline("# 使用UTF-8处理Content-Disposition，默认：false")
		FILE.writeline("#content-disposition-default-utf8=true")
		FILE.writeline("")
		FILE.writeline("# 自定义HTTP请求头，该参数可用作网站验证，在添加任务时可指定，并且可以使用多个")
		FILE.writeline("#header="&"""Host: """)
		FILE.writeline("#header="&"""Content-Type: """)
		FILE.writeline("#header="&"""Content-Disposition: """)
		FILE.writeline("#header="&"""Cache-Control: """)
		FILE.writeline("#header="&"""Pragma: """)
		FILE.writeline("#header="&"""Referer: """)
		FILE.writeline("#header="&"""Cookie: """)
		FILE.writeline("#header="&"""User-Agent: """)
		FILE.writeline("")
		FILE.writeline("")
		FILE.writeline("#【 异步DNS相关 】#")
		FILE.writeline("")
		FILE.writeline("# 启用异步DNS，默认：true")
		FILE.writeline("#async-dns=false")
		FILE.writeline("")
		FILE.writeline("# 异步DNS解析器中使用的DNS服务器地址，多个需使用逗号隔开")
		FILE.writeline("#async-dns-server=<IPADDRESS>")
		FILE.writeline("")
		FILE.writeline("")
		FILE.writeline("#【 任务状态相关 】#")
		FILE.writeline("")
		FILE.writeline("# 当下载任务切换到某状态时需要执行的命令，取值：\path\to\command")
		FILE.writeline("# 下载开始时要执行的命令")
		FILE.writeline("#on-download-start=<COMMAND>")
		FILE.writeline("")
		FILE.writeline("# 下载停止时要执行的命令")
		FILE.writeline("#on-download-stop=<COMMAND>")
		FILE.writeline("")
		FILE.writeline("# 下载暂停时要执行的命令")
		FILE.writeline("#on-download-pause=<COMMAND>")
		FILE.writeline("")
		FILE.writeline("# 下载错误时要执行的命令")
		FILE.writeline("on-download-error="&CDIR&"error.bat")
		FILE.writeline("")
		FILE.writeline("# 下载完成时要执行的命令")
		FILE.writeline("on-download-complete="&CDIR&"complete.bat")
		FILE.writeline("")
		FILE.writeline("# BT下载完成时要执行的命令")
		FILE.writeline("on-bt-download-complete="&CDIR&"complete.bat")
		FILE.writeline("")
		FILE.writeline("")
		FILE.writeline("#【 文件保存相关 】#")
		FILE.writeline("")
		FILE.writeline("# 所有下载任务的相关文件的保存路径")
		FILE.writeline("dir=C:\Users\voxhu\Downloads")
		FILE.writeline("")
		FILE.writeline("# 断点续传，仅对HTTP(S)/FTP有效")
		FILE.writeline("continue=true")
		FILE.writeline("")
		FILE.writeline("# 允许分片变化，当文件分片长度与其控制文件中的不同时默认会中止下载，默认：false")
		FILE.writeline("#allow-piece-length-change=true")
		FILE.writeline("")
		FILE.writeline("# 条件下载，当本地存在文件并且比远程文件旧时才进行下载，默认：false")
		FILE.writeline("#conditional-get=true")
		FILE.writeline("")
		FILE.writeline("# 允许覆盖文件，如果相应的控制文件不存在时则重新下载，默认：false")
		FILE.writeline("#allow-overwrite=true")
		FILE.writeline("")
		FILE.writeline("# 自动重命名，如果已存在同名文件时自动重命名新的下载，默认：true")
		FILE.writeline("auto-file-renaming=true")
		FILE.writeline("")
		FILE.writeline("")
		FILE.writeline("#【 会话保存相关 】#")
		FILE.writeline("")
		FILE.writeline("# 强制保存会话和控制文件，即使任务已经完成，该参数可用作断电保护，防止重启后任务丢失，默认：false")
		FILE.writeline("#force-save=true")
		FILE.writeline("")
		FILE.writeline("# 定时保存会话，单位(秒)，0为程序退出时保存，默认：0")
		FILE.writeline("save-session-interval=60")
		FILE.writeline("")
		FILE.writeline("# 定时保存控制文件，单位(秒)，取值：0~600，0为不保存，默认：60")
		FILE.writeline("auto-save-interval=30")
		FILE.writeline("")
		FILE.writeline("# 在内存中存储的最大下载结果数量，0为不存储，默认：1000")
		FILE.writeline("#max-download-result=<NUM>")
		FILE.writeline("")
		FILE.writeline("# 无数量上限保留所有未完成的下载结果，默认：true")
		FILE.writeline("#keep-unfinished-download-result=false")
		FILE.writeline("")
		FILE.writeline("# 在Aria2退出时保存“错误/未完成”的下载任务到会话文件")
		FILE.writeline("save-session="&CDIR&"aria2.session")
		FILE.writeline("")
		FILE.writeline("# 在Aria2启动时从会话文件中读取下载任务")
		FILE.writeline("input-file="&CDIR&"aria2.session")
		FILE.writeline("")
		FILE.writeline("")
		FILE.writeline("#【 FTP/SFTP相关 】#")
		FILE.writeline("")
		FILE.writeline("# FTP/SFTP用户名")
		FILE.writeline("#ftp-user=<USER>")
		FILE.writeline("")
		FILE.writeline("# FTP/SFTP密码")
		FILE.writeline("#ftp-passwd=<PASSWORD>")
		FILE.writeline("")
		FILE.writeline("# FTP被动模式，默认：true")
		FILE.writeline("#ftp-pasv=false")
		FILE.writeline("")
		FILE.writeline("# 传输类型，取值：binary，ascii，默认：binary")
		FILE.writeline("#ftp-type=ascii")
		FILE.writeline("")
		FILE.writeline("# 禁用Netrc，默认：false")
		FILE.writeline("#no-netrc=true")
		FILE.writeline("")
		FILE.writeline("# 设置.netrc文件路径，默认：当前用户HOME目录")
		FILE.writeline("netrc-path="&CDIR&"aria2.netrc")
		FILE.writeline("")
		FILE.writeline("")
		FILE.writeline("#【 Metalink相关 】#")
		FILE.writeline("")
		FILE.writeline("# 当下载的是一个Metalink文件时，自动下载Metelink中的文件，取值：true，false，mem，默认：true")
		FILE.writeline("#follow-metalink=false")
		FILE.writeline("")
		FILE.writeline("# 首选使用协议，取值：http，https，ftp，none，默认：none")
		FILE.writeline("#metalink-preferred-protocol=http")
		FILE.writeline("")
		FILE.writeline("# 仅使用唯一协议，默认：true")
		FILE.writeline("#metalink-enable-unique-protocol=false")
		FILE.writeline("")
		FILE.writeline("")
		FILE.writeline("#【 BitTorrent相关 】#")
		FILE.writeline("")
		FILE.writeline("# 当下载的是一个BitTorrent文件时，自动下载BitTorrent中的文件，取值：true，false，mem，默认：true")
		FILE.writeline("#follow-torrent=false")
		FILE.writeline("")
		FILE.writeline("# 将元数据保存为“.torrent”文件，仅在使用磁力链接时此选项才会生效，默认：false")
		FILE.writeline("bt-save-metadata=true")
		FILE.writeline("")
		FILE.writeline("# 在用磁力链接获取数据之前，首先读取 bt-save-metadata 选项保存的文件，如果存在，则跳过从DHT下载元数据，默认：false")
		FILE.writeline("bt-load-saved-metadata=true")
		FILE.writeline("")
		FILE.writeline("# 自动删除种子文件中未选择下载的文件，默认：false")
		FILE.writeline("bt-remove-unselected-file=true")
		FILE.writeline("")
		FILE.writeline("# 下载无速度时自动停止的时间，单位(秒)，0为禁用，默认：0")
		FILE.writeline("bt-stop-timeout=0")
		FILE.writeline("")
		FILE.writeline("# BT监听端口，默认：6881-6999")
		FILE.writeline("#listen-port=51413")
		FILE.writeline("")
		FILE.writeline("# 单个种子最大连接数，0为不限制，默认：55")
		FILE.writeline("bt-max-peers=0")
		FILE.writeline("")
		FILE.writeline("# 期望的下载速度，当下载速度低于此值时，将临时调整单个种子最大连接数，默认：50K")
		FILE.writeline("bt-request-peer-speed-limit=100K")
		FILE.writeline("")
		FILE.writeline("# 打开IPv4 DHT功能，默认：true")
		FILE.writeline("enable-dht=true")
		FILE.writeline("")
		FILE.writeline("# 设置IPv4的DHT网络入口点")
		FILE.writeline("#dht-entry-point=<HOST>:<PORT>")
		FILE.writeline("")
		FILE.writeline("# 设置IPv4 DHT文件路径，默认：当前用户HOME目录")
		FILE.writeline("dht-file-path="&CDIR&"dht.dat")
		FILE.writeline("")
		FILE.writeline("# 打开IPv6 DHT功能，默认：false")
		FILE.writeline("enable-dht6=true")
		FILE.writeline("")
		FILE.writeline("# 设置IPv6的DHT网络入口点")
		FILE.writeline("#dht-entry-point6=<HOST>:<PORT>")
		FILE.writeline("")
		FILE.writeline("# 设置IPv6 DHT文件路径，默认：当前用户HOME目录")
		FILE.writeline("dht-file-path6="&CDIR&"dht6.dat")
		FILE.writeline("")
		FILE.writeline("# DHT网络监听端口，默认：6881-6999")
		FILE.writeline("#dht-listen-port=51413")
		FILE.writeline("")
		FILE.writeline("# 启用对等体交换，默认：true")
		FILE.writeline("enable-peer-exchange=true")
		FILE.writeline("")
		FILE.writeline("# 指定对等体代理字符串")
		FILE.writeline("#peer-agent=<PEER_AGENT>")
		FILE.writeline("")
		FILE.writeline("# 指定对等体ID前缀，最大长度为20字节")
		FILE.writeline("#peer-id-prefix=<PEER_ID_PREFIX>")
		FILE.writeline("")
		FILE.writeline("# 启用本地对等体发现，默认：false")
		FILE.writeline("bt-enable-lpd=true")
		FILE.writeline("")
		FILE.writeline("# 完整性校验，默认：false")
		FILE.writeline("check-integrity=true")
		FILE.writeline("")
		FILE.writeline("# 继续之前的BT任务时，无需再次校验，默认：false")
		FILE.writeline("#bt-seed-unverified=true")
		FILE.writeline("")
		FILE.writeline("# 做种前检查文件哈希值，默认：true")
		FILE.writeline("#bt-hash-check-seed=false")
		FILE.writeline("")
		FILE.writeline("# 指定分享率，当种子的分享率达到这个数时停止做种，0为一直做种，默认：1.0")
		FILE.writeline("#seed-ratio=0")
		FILE.writeline("")
		FILE.writeline("# 最小做种时间，当种子的做种时长达到这个数时停止做种，单位(分)，0为从不做种")
		FILE.writeline("seed-time=0")
		FILE.writeline("")
		FILE.writeline("# BT服务器地址，多个需使用逗号隔开")
		FILE.writeline("bt-tracker=udp://tracker.coppersurfer.tk:6969/announce,udp://tracker.open-internet.nl:6969/announce,udp://9.rarbg.to:2710/announce,udp://tracker.skyts.net:6969/announce,udp://tracker.piratepublic.com:1337/announce,udp://tracker.opentrackr.org:1337/announce,udp://public.popcorn-tracker.org:6969/announce,udp://wambo.club:1337/announce,udp://tracker4.itzmx.com:2710/announce,udp://tracker1.wasabii.com.tw:6969/announce,udp://tracker.zer0day.to:1337/announce,udp://tracker.xku.tv:6969/announce,udp://tracker.vanitycore.co:6969/announce,udp://ipv4.tracker.harry.lu:80/announce,udp://inferno.demonoid.pw:3418/announce,udp://open.facedatabg.net:6969/announce,udp://mgtracker.org:6969/announce,udp://tracker.tiny-vps.com:6969/announce,udp://p4p.arenabg.com:1337/announce,udp://open.stealth.si:80/announce,udp://explodie.org:6969/announce,udp://bt.xxx-tracker.com:2710/announce,http://tracker.city9x.com:2710/announce,http://retracker.mgts.by:80/announce,udp://tracker.tvunderground.org.ru:3218/announce,udp://tracker.torrent.eu.org:451/announce,udp://tracker.internetwarriors.net:1337/announce,udp://tracker.grepler.com:6969/announce,udp://tracker.files.fm:6969/announce,udp://tracker.dler.org:6969/announce,udp://tracker.desu.sh:6969/announce,udp://tracker.cypherpunks.ru:6969/announce,udp://tracker.uw0.xyz:6969/announce,udp://t.agx.co:61655/announce,udp://sd-95.allfon.net:2710/announce,udp://santost12.xyz:6969/announce,udp://sandrotracker.biz:1337/announce,udp://retracker.nts.su:2710/announce,udp://retracker.lanta-net.ru:2710/announce,udp://thetracker.org:80/announce,http://tracker.skyts.net:6969/announce,http://retracker.telecom.by:80/announce,wss://tracker.openwebtorrent.com:443/announce,wss://tracker.fastcast.nz:443/announce,wss://tracker.btorrent.xyz:443/announce,ws://tracker.btsync.cf:2710/announce,udp://zephir.monocul.us:6969/announce,http://0d.kebhana.mx:443/announce,udp://torr.ws:2710/announce,udp://retracker.coltel.ru:2710/announce,udp://pubt.in:2710/announce,udp://tracker.swateam.org.uk:2710/announce,udp://tracker.mg64.net:6969/announce,udp://tracker.martlet.tk:6969/announce,udp://tracker.kamigami.org:2710/announce,udp://tracker.cyberia.is:6969/announce,udp://tracker.bluefrog.pw:2710/announce,udp://tracker.acg.gg:2710/announce,udp://peerfect.org:6969/announce,https://open.acgnxtracker.com:443/announce,https://evening-badlands-6215.herokuapp.com:443/announce,http://open.acgnxtracker.com:80/announce,http://fxtt.ru:80/announce,udp://z.crazyhd.com:2710/announce,udp://tracker.justseed.it:1337/announce,udp://packages.crunchbangplusplus.org:6969/announce,udp://104.238.198.186:8000/announce,https://open.kickasstracker.com:443/announce,http://tracker2.itzmx.com:6961/announce,http://tracker.vanitycore.co:6969/announce,http://tracker.torrentyorg.pl:80/announce,http://tracker.tfile.me:80/announce,http://tracker.mg64.net:6881/announce,http://tracker.electro-torrent.pl:80/announce,http://t.nyaatracker.com:80/announce,http://share.camoe.cn:8080/announce,http://servandroidkino.ru:80/announce,http://open.kickasstracker.com:80/announce,http://open.acgtracker.com:1096/announce,http://omg.wtftrackr.pw:1337/announce,http://mgtracker.org:6969/announce,http://bt.dl1234.com:80/announce,http://agusiq-torrents.pl:6969/announce,http://104.238.198.186:8000/announce,")
		FILE.writeline("")
		FILE.writeline("")
		FILE.writeline("#【 高级设置相关 】#")
		FILE.writeline("")
		FILE.writeline("# 使用SSL/TLS加密传输，RPC客户端需要使用https协议连接，WebSocket客户端则需使用wss协议，默认：false")
		FILE.writeline("#rpc-secure=true")
		FILE.writeline("")
		FILE.writeline("# 启用RPC加密设置的证书，文件必须是PKCS12或PEM格式")
		FILE.writeline("# PKCS12文件必须包含证书和密钥且密码必须为空，使用PEM则必须同时指定私钥")
		FILE.writeline("#rpc-certificate=<FILE>")
		FILE.writeline("")
		FILE.writeline("# 启用RPC加密设置的私钥，文件必须是PEM格式")
		FILE.writeline("#rpc-private-key=<FILE>")
		FILE.writeline("")
		FILE.writeline("# 启用客户端验证设置的证书，文件必须是PKCS12或PEM格式")
		FILE.writeline("# PKCS12文件必须包含证书和密钥且密码必须为空，使用PEM则必须同时指定私钥")
		FILE.writeline("#certificate=<FILE>")
		FILE.writeline("")
		FILE.writeline("# 启用客户端验证设置的私钥，文件必须是PEM格式")
		FILE.writeline("#private-key=<FILE>")
		FILE.writeline("")
		FILE.writeline("# 使用CA证书验证SSL/TLS对等体，文件必须是PEM格式，且可以包含多个CA证书")
		FILE.writeline("#ca-certificate=<FILE>")
		FILE.writeline("")
		FILE.writeline("# 启用CA证书验证SSL/TLS对等体，默认：true")
		FILE.writeline("check-certificate=false")
		FILE.writeline("")
		FILE.writeline("# 启用磁盘缓存，0为禁用，默认：16M")
		FILE.writeline("disk-cache=512M")
		FILE.writeline("")
		FILE.writeline("# 禁用控制台输出，默认：false")
		FILE.writeline("#quiet=true")
		FILE.writeline("")
		FILE.writeline("# 自动关闭应用时间，单位(秒)，0为禁用，默认：0")
		FILE.writeline("#stop=<SEC>")
		FILE.writeline("")
		FILE.writeline("# 保存上传的种子文件，默认：true")
		FILE.writeline("rpc-save-upload-metadata=true")
		FILE.writeline("")
		FILE.writeline("# 当种子文件下载完成后暂停后续的下载，默认：false")
		FILE.writeline("#pause-metadata=true")
		FILE.writeline("")
		FILE.writeline("# 延迟加载会话文件，并在需要时按需读取，当使用 save-SESSION 参数时，此项将被禁用，默认：false")
		FILE.writeline("#deferred-input=true")
		FILE.writeline("")
		FILE.writeline("# 下载前删除控制文件，此选项有助于使用不支持断点续传代理服务器的用户，默认：false")
		FILE.writeline("#remove-control-file=true")
		FILE.writeline("")
		FILE.writeline("# 实时数据块验证，如果数据块头部包含校验和，将在下载过程中对数据进行实时验证，默认：true")
		FILE.writeline("realtime-chunk-checksum=true")
		FILE.writeline("")
		FILE.writeline("# 优先下载，尝试先下载每个文件的开头和结尾，这将有助于文件预览")
		FILE.writeline("# 参数可以包括两个关键词：head和tail，需要使用逗号分隔，每个关键词可以包含一个参数SIZE")
		FILE.writeline("# 例如，如果指定head，每个文件的最前SIZE数据将会获得更高的优先级，tail表示每个文件的最后SIZE数据")
		FILE.writeline("bt-prioritize-piece=head=10M,tail=10M")
		FILE.writeline("")
		FILE.writeline("# 文件预分配方式，能有效降低磁盘碎片，取值：prealloc，falloc，none，默认：prealloc")
		FILE.writeline("# 预分配所需时间：prealloc > falloc > none，其中falloc需要NTFS文件系统支持")
		FILE.writeline("#file-allocation=none")
		FILE.close
		Set FILE=Nothing
	End If
	Set FILE=FSO.opentextfile(CONF)
	Do Until FILE.atendofstream
		READ=FILE.readline
		If InStr(READ,"input-file=")>0 Then
			If (Split(READ,"=")(0))="input-file" Then
				SESSION=(Split(READ,"=")(1))
				Exit Do
			End If
		End If
	Loop
	FILE.close
	Set FILE=Nothing
	If Not SESSION="" And Not FSO.fileexists(SESSION) Then
		Set FILE=FSO.createtextfile(SESSION)
		FILE.close
		Set FILE=Nothing
	End If
	Set FILE=FSO.opentextfile(CONF)
	Do Until FILE.atendofstream
		READ=FILE.readline
		If InStr(READ,"log=")>0 Then
			If (Split(READ,"=")(0))="log" Then
				LOG=(Split(READ,"=")(1))
				Exit Do
			End If
		End If
	Loop
	FILE.close
	Set FILE=Nothing
	If Not LOG="" And FSO.fileexists(LOG) Then
		FSO.deletefile(LOG)
	End If
	Set FSO=Nothing
End Function

'检测模块
Function CHECK()
	Set PROCESSLIST=GetObject("winmgmts:\\.\root\cimv2").execquery("select * from win32_process where name='aria2c.exe'")
End Function

'逻辑主体
Set WSHSHELL=CreateObject("wscript.shell")
CDIR=Left(WScript.scriptfullname,Len(WScript.scriptfullname)-Len(WScript.scriptname))
CORE=CDIR&"aria2c.exe"
CONF=CDIR&"aria2.conf"
INITIALIZE:CHECK
If PROCESSLIST.count=0 Then
	WSHSHELL.run(""""&CORE&""""&" "&"--conf-path="&""""&CONF&""""),0
	Set PROCESSLIST=Nothing:WScript.sleep 100:CHECK
	If PROCESSLIST.count=1 Then
		WSHSHELL.popup "程序已经启动 ●",1,"Aria2",64
	Else
		WSHSHELL.popup "程序未能启动 ○",1,"Aria2",48
	End If
Else
	For Each PROCESS In PROCESSLIST
		PROCESS.terminate()
	Next
	For NUM=0 To 100
		Set PROCESSLIST=Nothing:WScript.sleep 100:CHECK
		If PROCESSLIST.count=0 Then
			WSHSHELL.popup "程序已经关闭 ○",1,"Aria2",64
			Exit For
		ElseIf NUM=100 Then
			WSHSHELL.popup "程序未能关闭 ●",1,"Aria2",48
		End If
	Next
End If
WScript.quit
]]></script>
</job>
